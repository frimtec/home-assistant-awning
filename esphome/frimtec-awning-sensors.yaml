---
# Frimtec awning sensors.
#
# Sensors to control the awning for a winter garden:
# - Wind speed [km/h]
# - Sunlight [lx]
#
substitutions:
  device_name: frimtec-awning-sensors
  friendly_name: "Awning Sensor"
  device_description: "Sensors to control an awning"
  project_version: "1.4.1"
  wind_pulse_pin: GPIO13
  sun_light_pin: GPIO32
  status_led: GPIO5

  # Webserver credentials â¬‡ #
  web_username: !secret esphome_web_username
  web_password: !secret esphome_web_password

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  project:
    name: "frimtec.awning-sensors"
    version: "${project_version}"

esp32:
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}'
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:

# Enable improv over serial
improv_serial:

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_api_encryption

ota:
  - platform: esphome

web_server:
  port: 80
  auth:
    username: '${web_username}'
    password: '${web_password}'

output:
  - platform: gpio
    pin: GPIO2
    id: output_red
  - platform: gpio
    pin: GPIO4
    id: output_green

light:
  - platform: binary
    internal: false
    id: led_red
    name: "${friendly_name} - Status Red"
    output: output_red
  - platform: binary
    internal: false
    id: led_green
    name: "${friendly_name} - Status Green"
    output: output_green

# Status LED for connection
status_led:
  pin:
    # Blue LED
    number: ${status_led}

# Sensors for ESP version and WIFI information
text_sensor:
  # Installed version
  - platform: template
    name: '${friendly_name} - Installed Version'
    id: glow_version
    icon: "mdi:label-outline"
    entity_category: diagnostic
    lambda: |-
      return {"${project_version}"};
    update_interval: 6h
  - platform: version
    hide_timestamp: true
    name: '${friendly_name} - ESPHome Version'
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - IP Address'
      icon: mdi:wifi
    ssid:
      name: '${friendly_name} - Connected SSID'
      icon: mdi:wifi-strength-2

number:
  # Set the number of pulses of one anemometer rotation
  - platform: template
    id: anemometer_pulses
    name: 'Anemometer pulses per rotation'
    optimistic: true
    min_value: 1
    max_value: 100
    step: 1
    restore_value: yes
    initial_value: 1

  # Set the radius of the cup anemometer [mm]
  - platform: template
    id: anemometer_radius
    name: 'Anemometer radius [mm]'
    optimistic: true
    min_value: 1
    max_value: 500
    step: 1
    restore_value: yes
    initial_value: 38

  # Sunlight additive to convert sensor value to lx
  - platform: template
    id: sun_light_add
    name: 'Sunlight additive to convert sensor value to lx'
    optimistic: true
    min_value: -10
    max_value: 10
    step: 0.001
    restore_value: yes
    initial_value: -3.155

  # Sunlight multiplicative to convert sensor value to lx
  - platform: template
    id: sun_light_multiply
    name: 'Sunlight multiplicative to convert sensor value to lx'
    optimistic: true
    min_value: -10000
    max_value: 10000
    step: 1
    restore_value: yes
    initial_value: -1000

sensor:
  # WiFi signal
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Signal"
    update_interval: 120s

  - platform: pulse_counter
    name: '${friendly_name} - Wind speed'
    update_interval: 10s
    force_update: true
    device_class: wind_speed
    unit_of_measurement: km/h
    state_class: measurement
    icon: mdi:weather-windy
    pin: ${wind_pulse_pin}
    filters:
      # multiply value = (2 * pi * anemometer_radius * 60) / (anemometer_pulses * 1000000)
      - lambda: return x * ((id(anemometer_radius).state * 37.699111843) / (id(anemometer_pulses).state * 100000.0));

  - platform: adc
    id: sun_light
    pin: ${sun_light_pin}
    update_interval: 5s
    attenuation: 11db
    name: '${friendly_name} - Sun light'
    icon: "mdi:weather-sunny"
    device_class: "illuminance"
    unit_of_measurement: lx
    state_class: measurement
    filters:
      - lambda: return (x + id(sun_light_add).state) * id(sun_light_multiply).state;
      - clamp:
          min_value: 0
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5
